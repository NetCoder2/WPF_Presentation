<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:ee="http://schemas.microsoft.com/expression/2010/effects"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                    >
    
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Scale factor for Mouse Down event -->
    <system:Double x:Key="ScaleOnClick">1.2</system:Double>
    <!-- Scale factor for Mouse Down event -->
    <Duration x:Key="DurationOnClick">0:0:0</Duration>

    <!-- Simple Window Button which increases size on MouseDown-->
    <Style TargetType="Button" x:Key="SimpleButton" BasedOn="{x:Null}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False"/>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>

        <!-- Tone effect -->
        <Setter Property="Effect" >
            <Setter.Value>
                <ee:ColorToneEffect x:Name="ButtonColorTransform"  
                                    DarkColor="Black" LightColor="White" Desaturation="0" ToneAmount="0"/>
            </Setter.Value>
        </Setter>

        <!-- Scale Effect -->
        <Setter Property="RenderTransform" >
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>


        <Style.Triggers>

            <!-- Trigger for mouse down -->
            <EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonDown">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(UIElement.Effect).(ee:ColorToneEffect.ToneAmount)"
                                    From="0" To="1" Duration="0:0:0.1" />

                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                    From="1" To="{StaticResource ScaleOnClick}" Duration="{StaticResource DurationOnClick}" />
                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                    From="1" To="{StaticResource ScaleOnClick}" Duration="{StaticResource DurationOnClick}"  />

                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>

            <!-- Trigger for mouse up -->
            <EventTrigger  RoutedEvent="Button.PreviewMouseUp">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation 
                                    Storyboard.TargetProperty="(UIElement.Effect).(ee:ColorToneEffect.ToneAmount)"
                                    From="1" To="0" Duration="0:0:0.1" />
                        <DoubleAnimation 
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                     From="{StaticResource ScaleOnClick}" To="1" Duration="{StaticResource DurationOnClick}"  />
                        <DoubleAnimation 
                                     Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                     From="{StaticResource ScaleOnClick}" To="1" Duration="{StaticResource DurationOnClick}"  />
                    </Storyboard>
                </BeginStoryboard>

            </EventTrigger>

        </Style.Triggers>
    </Style>



    <!-- Cancel Button -->
    <Style TargetType="{x:Type Button}" x:Key="CancelButton" BasedOn="{StaticResource SimpleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <Viewbox  >
                            <StackPanel  Orientation="Horizontal">

                                
                                <TextBlock
                                 Text="Close" 
                                 VerticalAlignment="Center" 
                                 HorizontalAlignment="Left"
                                 FontFamily = "{StaticResource LabelFont}"
                                 FontWeight  = "{StaticResource LabelWeight}"
                                 FontSize="100pt" 
                                 Foreground="{StaticResource WordRedBrush}">
                                </TextBlock>
                                
                                <Image Margin="10, 0,0,0" VerticalAlignment="Top"  
                                    Source="/UI;component/Images/Buttons/cancel.png">
                                </Image>

                            </StackPanel>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Next Button -->
    <Style TargetType="{x:Type Button}" 
           x:Key="NextButton" BasedOn="{StaticResource SimpleButton}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <Viewbox  >
                            <StackPanel  Orientation="Horizontal">


                                <TextBlock
                                 Text="Next" 
                                 VerticalAlignment="Center" 
                                 HorizontalAlignment="Left"
                                 FontFamily = "{StaticResource LabelFont}"
                                 FontWeight  = "{StaticResource LabelWeight}"
                                 FontSize="100pt" 
                                 Foreground="{StaticResource WordBlueBrush}">
                                </TextBlock>

                                <ed:BlockArrow 
                                    Margin="10, 0,0,0" 
                                    Orientation="Right" 
                                               Stroke="Black"
                                               ArrowBodySize="0.69"
                                               ArrowheadAngle="70"
                                               Fill="{StaticResource WordBlueBrush}"
                                               Height="200"
                                               Width="200"
                                               >
                                </ed:BlockArrow>



                            </StackPanel>
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!-- Window Icon Button -->
    <Style TargetType="Button" x:Key="IconButton" BasedOn="{StaticResource SimpleButton}">
        <Setter Property="Padding" Value="6" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- Outer white rounded border -->
                    <Border CornerRadius="100" Background="White" Padding="{TemplateBinding Padding}"  
                            RenderTransformOrigin="0.5, 0.5">

                        <!-- Shadow -->
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="20" Color="{StaticResource ShadowColor}"/>
                        </Border.Effect>
                        <Grid>

                            <!-- Inner rounded border -->
                            <Border x:Name="BackgroundBorder" CornerRadius="100"  Background="{TemplateBinding Background}" >
                            </Border >
                            <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Button.Content}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!-- Mouse click trigger -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter  TargetName="BackgroundBorder" Property="Background" 
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                Path=Foreground}"/>
                        </Trigger>

                        <!-- Mouse over trigger -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  TargetName="BackgroundBorder" Property="Background" 
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>



    <!-- Window Close Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource IconButton}">
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="Background" Value="{StaticResource WordBlueBrush}" />
    </Style>


    <!-- Window Control Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" 
           BasedOn="{StaticResource IconButton}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"  />
        <Setter Property="Background" Value="{StaticResource WordBlueBrush}" />
    </Style>







    <!-- Regular button -->
    <Style TargetType="{x:Type Button}">

        <Setter Property="Background" Value="{StaticResource WordOrangeBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <!--<Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            CornerRadius="10"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource WordOrange}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Text button -->
    <Style x:Key="TextButton" TargetType="{x:Type Button}" >

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="50 10" />
        <Setter Property="Margin" Value="0 10" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            CornerRadius="10"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource WordOrangeBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Rounded Button -->
    <Style TargetType="Button" x:Key="RoundedButton" BasedOn="{StaticResource SimpleButton}">

        <Setter Property="Background" Value="{StaticResource LightBlueBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource WordBlueBrush}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="BackgroundBorder"  
                            CornerRadius="30" 
                              
                            Padding="{TemplateBinding Padding}"  
                            Background="{TemplateBinding Background}" 
                            RenderTransformOrigin="0.5, 0.5">

                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="{StaticResource ShadowColor}"/>
                        </Border.Effect>


                        <Grid>

                            <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                Content="{TemplateBinding Button.Content}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- Mouse over trigger -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  TargetName="BackgroundBorder" Property="Background" 
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                Path=BorderBrush}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>





</ResourceDictionary>